apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kubeapps-psp
spec:
  privileged: true
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  volumes:
  - '*'
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-clusterrole
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - kubeapps-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubeapps-clusterrole
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeapps-clusterrole
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
- kind: ServiceAccount # Omit apiGroup
  name: default
  namespace: default
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # Name must start with longhorn-...
  name: standard-postgres-pvc-tkg
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: pacific-gold-storage-policy
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webapp
  name: webapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  strategy: {}
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - args:
        - uwsgi
        - --ini
        - app.ini
        image: eslih/basic-webapp-frontend:v1.1.2
        name: webapp
#        volumeMounts:
#          - mountPath: /app/static
#            name: statics
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      restartPolicy: Always
#      volumes:
#        - name: statics
#          persistentVolumeClaim:
#            claimName: longhorn-statics-pvc
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: webapp
  name: webapp
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: webapp
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    # Should be recreate, otherwise another container will spin up and will request access to the volume.
    # The volume may only be attached to a single container (ReadWriteOnce).
    # By forcing a recreate the pod will be removed and then be recreated.
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: postgres
    spec:
      containers:
        - image: postgres:13.1-alpine
          name: postgres
          env:
            - name: POSTGRES_DB
              value: labo
            - name: POSTGRES_PASSWORD
              value: student_password
            - name: POSTGRES_USER
              value: student_user
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres
              subPath: postgres
          resources: { }
      restartPolicy: Always
      volumes:
        - name: postgres
          persistentVolumeClaim:
            claimName: standard-postgres-pvc-tkg
status: { }
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
status:
  loadBalancer: { }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: eslih/basic-webapp-nginx:v1.1.2
        name: nginx
        ports:
        - containerPort: 80
#        volumeMounts:
#          - mountPath: /app/static
#            name: statics
        resources: {}
      restartPolicy: Always
#      volumes:
#        - name: statics
#          persistentVolumeClaim:
#            claimName: longhorn-statics-pvc
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  ports:
  - name: "80"
    port: 80
    targetPort: 80
  selector:
    app: nginx
  type: LoadBalancer
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api
  name: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  strategy: {}
  template:
    metadata:
      labels:
        app: api
    spec:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
      containers:
      -
        env:
        - name: PG_DATABASE
          value: labo
        - name: PG_HOST
          value: postgres
        - name: PG_PASSWORD
          value: student_password
        - name: PG_PORT
          value: "5432"
        - name: PG_USER
          value: student_user
        image: eslih/basic-webapp-api:v1.1.2
        name: api
        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api
  name: api
spec:
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: api
status:
  loadBalancer: {}
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: scaler
spec:
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  maxReplicas: 10
  scaleTargetRef:
    apiVersion: apps/v1beta2
    kind: Deployment
    name: api